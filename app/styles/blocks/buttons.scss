// BLOCK
// mixins
// placeholders

// btn

// ELEMENTS
//  __icon
//  __count

// MODIFIERS
// ## Misc ##
// --icon
// --disabled
// --is-toggle

// ## Themes ##
// --ghost
// --link
// --inverted
// --primary-lightest
// --text
// --text-inverted

// ## Size ##
// --xs
// --sm
// --lg
// --xl

// CONTAINER
// -group

// CONTAINER MODIFIERS
// -group--xxs
// -group--xs

// MIXINS
// Se o botão possuir states, ele deverá esconder os elementos internos e
// deverá possuir um conteúdo ::before para segurar a altura do botão.
// @mixin btn--has-state {
//     overflow: hidden;

//     &::before {
//         content: '';
//         display: inline-block;
//         height: 1em;
//         opacity: 0;
//         visibility: hidden;
//         width: 1em;
//     }
// }

// PLACEHOLDERS
%btn-steps {
    @include transition();

    align-items: center;
    bottom: 0;
    display: flex;
    justify-content: center;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 2;
}

.btn {
    $this: &;

    @include button;

    background-color: $green--dark;
    border-radius: $radius--md;
    color: $color-white;
    cursor: pointer;
    flex: 0 0 auto;
    padding: 1em 1.5em;
    transition-property: background-color, box-shadow, transform;

    @include hover {
        background-color: $green--dark;
    }

    // ELEMENTS
    &__count {
        font-style: italic;
        opacity: .85;
        margin-left: $distance--xxs;
    }

    &__icon {
        font-weight: bold;
        margin-right: $distance--xs;
        opacity: .65;
    }

    // MODIFIERS
    &--icon {
        align-items: center;
        align-self: center;
        border-radius: $radius--capsule;
        display: inline-flex;
        justify-content: center;
        padding: .572em;

        &::before {
            align-items: center;
            display: flex;
            height: 1em;
            justify-content: center;
            width: 1em;
        }

        // SANITIZER
        span {
            display: block;
            outline: 10px solid crimson;
            text-align: center;

            &::before {
                content: 'SPAN DESNECESSÁRIO'
            }
        }
    }

    &--disabled {
        cursor: not-allowed;
        opacity: .5;
        pointer-events: none;
    }

    &--is-toggle {
        // @include btn--has-state;

        height: 1rem;
        line-height: 1.25;
        justify-content: flex-start;
        overflow: hidden;
        position: relative;
        text-align: left;

        &:focus,
        &:hover { background-color: transparent; }

        [class*='__default'] {
            @extend %btn-steps;

            height: 100%;
            position: absolute;
        }

        [class*='__active'],
        [class*='__disabled'] {
            @extend %btn-steps;

            transform: translateY(-100%);
        }

        &--on {
            [class*='__default'] { transform: translateY(100%); }
            [class*='__active'] { transform: translateY(0); }
        }

        &--disabled {
            [class*='__default'] { transform: translateY(100%); }
            [class*='__disabled'] { transform: translateY(0); }

            &:hover {
                background-color: transparentize($color-black, .85);
            }

        }

    }





    &--leaf {
        background-color: $leaf-40;
        background-image: linear-gradient(to top, $leaf-50, $leaf-40);
        color: $color-white;

        @include hover {
            background-color: $leaf-60;
        }

    }

    &--leaf-ghost {
        background-color: $gray-0;
        background-image: linear-gradient(to top, $gray-0, $color-white);
        border: 1px solid $leaf-40;
        color: $leaf-50;

        @include hover {
            background-color: $leaf-0;
        }

    }

    &--ghost {
        background-color: transparent;
        border: 1px solid currentColor;
        color: $green-leaf;

        &-white {
            color: $color-white;
        }

        @include hover {
            background-color: $lemon-5;
        }

    }

    &--inverted {
        background-color: $green-0;
        color: $green-leaf;

        @include hover {
            background-color: $green-5;
        }

    }

    &--link {
        @include has-capsule-on-hover;

        background-color: transparent;
        border-radius: 0;
        box-shadow: none;
        color: $color-gray--darkest;
        padding: 0;
        text-shadow: none;

        &::after {
            border-bottom: 4px dotted $color-gray--light;
            content: '';
            left: 0;
            opacity: 1;
            position: absolute;
            top: 100%;

            transition: 300ms cubic-bezier(.455, .03, .515, .955); // IE fallback
            transition: 300ms var(--ease-in-out-quad);

            width: 100%;
        }

        &:hover {

            &::after {
                opacity: 0;
            }

        }

    }

    &--text {
        background-color: transparent;
        box-shadow: none;
        color: $color-gray--darkest;
        padding: 0;
        text-shadow: none;

        @include hover {
            background-color: transparent;
            box-shadow: none;
            opacity: 1;
            transform: translateY(0);
        }

    }

    &--text-inverted {
        background-color: transparent;
        box-shadow: none;
        color: $color-white;
        padding: 0;
        text-shadow: none;

        @include hover {
            background-color: transparent;
            box-shadow: none;
            opacity: 1;
            transform: translateY(0);
        }

    }

    &--success {
        background-color: saturate(darken($color-success,6%),6%);

        @include hover {
            background-color: saturate(darken($color-success, 8%), 8%);
        }

    }

    // Sizes
    &--xs {
        font-size: ($font-size--xxs - ($font-size--xxs / 4));
    }

    &--sm {
        font-size: ($font-size--xxs - ($font-size--xxs / 8));
    }

    &--lg {
        font-size: $font-size--xs;
    }

    &--xl {
        font-size: $font-size--sm;
    }

    // Container
    &-group {

        > *:not(:last-child) {
            margin-right: $distance--sm;
        }

        &--xs {
            > *:not(:last-child) {
                margin-right: $distance--xs;
            }

        }

        &--xxs {
            > *:not(:last-child) {
                margin-right: $distance--xxs;
            }

        }

    }

}
